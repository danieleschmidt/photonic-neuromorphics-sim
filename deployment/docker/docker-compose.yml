version: '3.8'

services:
  # Main application service
  photonic-sim:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: photonic-neuromorphics:${VERSION:-latest}
    container_name: photonic-sim-app
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8443:8443"
    environment:
      - PHOTONIC_ENV=production
      - PHOTONIC_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PHOTONIC_REDIS_URL=redis://redis:6379
      - PHOTONIC_POSTGRES_URL=postgresql://photonic:${DB_PASSWORD}@postgres:5432/photonic_db
      - PHOTONIC_PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - photonic_data:/app/data
      - photonic_logs:/app/logs
      - photonic_tmp:/app/tmp
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: photonic-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: photonic-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=photonic_db
      - POSTGRES_USER=photonic
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photonic -d photonic_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: photonic-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - photonic-network

  # Grafana visualization service
  grafana:
    image: grafana/grafana:latest
    container_name: photonic-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
      - GF_SMTP_USER=${SMTP_USER:-}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD:-}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - photonic-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: photonic-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - photonic-sim
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  photonic_data:
    driver: local
  photonic_logs:
    driver: local
  photonic_tmp:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  photonic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16