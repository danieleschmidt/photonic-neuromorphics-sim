version: '3.8'

services:
  # Main Photonic Neuromorphics Application
  photonic-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: photonic-neuromorphics:latest
    restart: always
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - OPTIMIZATION_LEVEL=2
      - CACHE_SIZE=1000
      - MAX_WORKERS=4
      - MEMORY_POOL_SIZE=1024
    ports:
      - "8080:8080"
    volumes:
      - ./data:/app/data:ro
      - ./outputs:/app/outputs
      - photonic_cache:/app/cache
      - photonic_logs:/app/logs
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "python", "-c", "import photonic_neuromorphics; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    depends_on:
      - prometheus
      - grafana

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.40.7
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=365d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Visualization
  grafana:
    image: grafana/grafana:9.3.2
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=photonic_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    networks:
      - photonic-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for Notifications
  alertmanager:
    image: prom/alertmanager:v0.25.0
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:2.7.1
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:2.7.1
    restart: always
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - photonic_logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - photonic-network
    depends_on:
      - loki

  # Redis for Caching and Session Management
  redis:
    image: redis:7.0.8-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - photonic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.23.3-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - photonic-network
      - public-network
    depends_on:
      - photonic-app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Scanner (runs periodically)
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile.security
    image: photonic-security-scanner:latest
    restart: "no"
    environment:
      - SCAN_INTERVAL=3600
      - REPORT_PATH=/app/security-reports
    volumes:
      - ./:/app/code:ro
      - security_reports:/app/security-reports
    networks:
      - photonic-network
    profiles:
      - security

  # Backup Service
  backup:
    image: alpine:3.17
    restart: "no"
    environment:
      - BACKUP_INTERVAL=86400  # Daily
      - RETENTION_DAYS=30
    volumes:
      - photonic_cache:/backup/cache:ro
      - prometheus_data:/backup/prometheus:ro
      - grafana_data:/backup/grafana:ro
      - ./backups:/backup/output
    command: |
      sh -c '
        while true; do
          echo "Starting backup at $$(date)"
          tar -czf /backup/output/photonic-backup-$$(date +%Y%m%d-%H%M%S).tar.gz \
            -C /backup cache prometheus grafana
          find /backup/output -name "*.tar.gz" -mtime +$$RETENTION_DAYS -delete
          echo "Backup completed at $$(date)"
          sleep $$BACKUP_INTERVAL
        done
      '
    networks:
      - photonic-network
    profiles:
      - backup

volumes:
  photonic_cache:
    driver: local
  photonic_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  security_reports:
    driver: local

networks:
  photonic-network:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
  public-network:
    driver: bridge