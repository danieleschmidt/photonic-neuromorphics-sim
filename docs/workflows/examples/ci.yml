# Example CI workflow for photonic neuromorphics simulation
# This file should be copied to .github/workflows/ci.yml
# MANUAL ACTION REQUIRED: Repository maintainers must create this workflow manually

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports

      - name: Security scan with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ --exit-zero

      - name: Upload bandit results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-report.json

      - name: Dependency vulnerability check
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --desc

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit-report.json

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-type: ['unit', 'integration', 'contract']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev libssl-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}.unit

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}.integration

      - name: Run contract tests
        if: matrix.test-type == 'contract'
        run: |
          pytest tests/contract/ -v
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}.contract

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.python-version }}-${{ matrix.test-type }}

  # Performance and regression tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v --benchmark-json=benchmark.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: true

  # Build verification
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Verify package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Docker image build and security scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Load image for scanning
        run: |
          docker load --input /tmp/image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image (on main branch)
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Documentation verification
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          sphinx-build -b html docs/ docs/_build/html/

      - name: Check documentation links
        run: |
          sphinx-build -b linkcheck docs/ docs/_build/linkcheck/

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # SLSA provenance generation
  provenance:
    name: Generate SLSA Provenance
    needs: [build, docker]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true

  # Status check aggregation
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [code-quality, test, performance, build, docker, docs]
    if: always()
    
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" && \
                "${{ needs.docs.result }}" == "success" ]]; then
            echo "CI passed successfully"
            exit 0
          else
            echo "CI failed"
            exit 1
          fi