[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "photonic-neuromorphics-sim"
version = "0.1.0"
description = "Verilog + Python playground that models silicon-photonic spiking neurons and cross-bar synapses"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"}
]
keywords = ["photonics", "neuromorphics", "spice", "verilog", "rtl", "openlane"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.4.0",
    "torch>=1.9.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "gdspy>=1.6.0",
    "spicepy>=1.0.0",
    "networkx>=2.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx_rtd_theme>=1.3.0",
    "sphinxcontrib-mermaid>=0.9.0",
    "nbsphinx>=0.9.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/photonic-neuromorphics-sim"
Documentation = "https://photonic-neuromorphics.readthedocs.io"
Repository = "https://github.com/yourusername/photonic-neuromorphics-sim.git"
Issues = "https://github.com/yourusername/photonic-neuromorphics-sim/issues"

[project.scripts]
photonic-sim = "photonic_neuromorphics.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
photonic_neuromorphics = ["*.yaml", "*.json", "templates/*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=photonic_neuromorphics --cov-report=term-missing"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
    "performance: marks tests as performance-related",
    "performance_regression: marks tests for regression detection",
    "contract: marks tests as API contract tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/conftest.py"]