apiVersion: v1
kind: Namespace
metadata:
  name: photonic-neuromorphics
  labels:
    name: photonic-neuromorphics
    version: "1.0.0"

---

# Configuration Map
apiVersion: v1
kind: ConfigMap
metadata:
  name: photonic-config
  namespace: photonic-neuromorphics
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  PYTHONPATH: "/app/src"
  METRICS_ENABLED: "true"
  HEALTH_CHECK_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  WORKERS: "4"
  MAX_MEMORY: "8Gi"
  ENABLE_GPU: "true"

---

# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: photonic-secrets
  namespace: photonic-neuromorphics
type: Opaque
data:
  POSTGRES_PASSWORD: cGhvdG9uaWNfcGFzcw== # base64 encoded
  GRAFANA_PASSWORD: Z3JhZmFuYV9wYXNz # base64 encoded
  JWT_SECRET: and0X3NlY3JldF9rZXk= # base64 encoded

---

# Persistent Volume for data storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: photonic-data-pv
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /opt/photonic-data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: photonic-data-pvc
  namespace: photonic-neuromorphics
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---

# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: photonic-neuromorphics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: photonic_neuromorphics
        - name: POSTGRES_USER
          value: photonic_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: photonic-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - photonic_user
            - -d
            - photonic_neuromorphics
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - photonic_user
            - -d
            - photonic_neuromorphics
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: photonic-data-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: photonic-neuromorphics
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: photonic-neuromorphics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: photonic-neuromorphics
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379

---

# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: photonic-app
  namespace: photonic-neuromorphics
  labels:
    app: photonic-app
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: photonic-app
  template:
    metadata:
      labels:
        app: photonic-app
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: photonic-sa
      containers:
      - name: photonic-app
        image: photonic-neuromorphics:production
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: photonic-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: photonic-config
              key: LOG_LEVEL
        - name: PYTHONPATH
          valueFrom:
            configMapKeyRef:
              name: photonic-config
              key: PYTHONPATH
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: photonic-config
              key: METRICS_ENABLED
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: photonic-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
        - name: models-storage
          mountPath: /app/models
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
            nvidia.com/gpu: "0"
          limits:
            memory: "8Gi"
            cpu: "4"
            nvidia.com/gpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: photonic-data-pvc
      - name: logs-storage
        emptyDir: {}
      - name: models-storage
        emptyDir: {}
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: "gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---

# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: photonic-sa
  namespace: photonic-neuromorphics

---

# Cluster Role for service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: photonic-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: photonic-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: photonic-role
subjects:
- kind: ServiceAccount
  name: photonic-sa
  namespace: photonic-neuromorphics

---

# Application Service
apiVersion: v1
kind: Service
metadata:
  name: photonic-app-service
  namespace: photonic-neuromorphics
  labels:
    app: photonic-app
spec:
  selector:
    app: photonic-app
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  - name: metrics
    protocol: TCP
    port: 9090
    targetPort: 9090
  type: ClusterIP

---

# Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: photonic-lb-service
  namespace: photonic-neuromorphics
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  selector:
    app: photonic-app
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 8080
  type: LoadBalancer

---

# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: photonic-hpa
  namespace: photonic-neuromorphics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: photonic-app
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---

# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: photonic-network-policy
  namespace: photonic-neuromorphics
spec:
  podSelector:
    matchLabels:
      app: photonic-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53

---

# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: photonic-ingress
  namespace: photonic-neuromorphics
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.photonic-neuromorphics.ai
    - www.photonic-neuromorphics.ai
    secretName: photonic-tls
  rules:
  - host: api.photonic-neuromorphics.ai
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: photonic-app-service
            port:
              number: 80
  - host: www.photonic-neuromorphics.ai
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: photonic-app-service
            port:
              number: 80

---

# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: photonic-pdb
  namespace: photonic-neuromorphics
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: photonic-app