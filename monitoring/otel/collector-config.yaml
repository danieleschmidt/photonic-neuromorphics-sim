# OpenTelemetry Collector configuration for photonic neuromorphics simulation
receivers:
  # OTLP receiver for applications
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8888']

  # Host metrics receiver
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      load: {}
      disk: {}
      filesystem: {}
      network: {}
      process:
        mute_process_name_error: true

  # Custom photonic simulation receiver
  photonic_receiver:
    endpoint: 0.0.0.0:9999
    protocols: [grpc, http]

processors:
  # Batch processor for performance
  batch:
    timeout: 30s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Resource processor for adding metadata
  resource:
    attributes:
      - key: service.name
        value: photonic-neuromorphics-sim
        action: upsert
      - key: service.version
        from_attribute: version
        action: upsert
      - key: deployment.environment
        value: ${ENVIRONMENT}
        action: upsert
      - key: k8s.cluster.name
        value: photonic-cluster
        action: upsert

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512

  # Probabilistic sampler for traces
  probabilistic_sampler:
    sampling_percentage: 10

  # Filter processor to remove sensitive data
  filter:
    metrics:
      exclude:
        match_type: regexp
        metric_names:
          - '.*password.*'
          - '.*secret.*'
          - '.*token.*'
    
    spans:
      exclude:
        match_type: strict
        span_names:
          - 'internal_health_check'

  # Attributes processor for enrichment
  attributes:
    actions:
      - key: photonic.component.type
        from_attribute: component_type
        action: upsert
      - key: photonic.wavelength.nm
        from_attribute: wavelength
        action: upsert
      - key: photonic.technology.node
        from_attribute: technology_node
        action: upsert

  # Transform processor for metric calculations
  transform:
    metric_statements:
      - context: metric
        statements:
          # Calculate energy per spike
          - set(name, "photonic.energy_per_spike_joules") where name == "photonic.spike_energy"
          # Convert power from watts to milliwatts
          - set(name, "photonic.power_milliwatts") where name == "optical_power_watts"
          - set(value, value * 1000) where name == "photonic.power_milliwatts"

exporters:
  # Prometheus exporter
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: photonic
    const_labels:
      service: photonic-neuromorphics
    
  # OTLP exporter to Jaeger
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  # Prometheus remote write
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
    tls:
      insecure: true

  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # File exporter for backup
  file:
    path: /tmp/otel-metrics.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3

  # Custom photonic exporter
  photonic_exporter:
    endpoint: "http://photonic-backend:8080/metrics"
    timeout: 30s
    headers:
      authorization: "Bearer ${PHOTONIC_API_TOKEN}"

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133

  # pprof extension for performance profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # zpages extension for debugging
  zpages:
    endpoint: 0.0.0.0:55679

  # Memory ballast for stable memory usage
  memory_ballast:
    size_mib: 64

service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  
  pipelines:
    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics, photonic_receiver]
      processors: [memory_limiter, resource, batch, filter, attributes, transform]
      exporters: [prometheus, prometheusremotewrite, logging, file, photonic_exporter]

    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, probabilistic_sampler, batch, filter, attributes]
      exporters: [otlp/jaeger, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch, filter]
      exporters: [logging, file]

  # Telemetry configuration
  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888
      level: detailed
    traces:
      processors: [batch]